{"version":3,"sources":["components/tabgroup.js","components/Checkbox.js","components/CheckboxGroup.js","components/bin-converter.js","components/simple-timer.js","containers/App.js","index.js"],"names":["TabGroup","tabitmes","this","props","titleArr","map","item","idx","name","panelArr","panel","defaultIndex","Component","Checkbox","label","isSelected","onCheckboxChange","type","checked","onChange","CheckboxGroup","checkedArr","handler","checkboxArr","index","toString","padStart","className","BinConverter","componentDidMount","updateValues","handleCheckboxChange","event","Number","target","newCheckedArr","state","handleRandomize","newbitsVal","i","random","Math","push","pow","bitsVal","handleResetAll","Array","fill","handleCheckAll","bitN","onoff","val","setState","Object","assign","binaryValue","toUpperCase","decimalValue","hexValue","OutputTable","readOnly","maxLength","size","style","value","onClick","SimpleTimer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAiCeA,G,6KA1BH,IACAC,EAAaC,KAAKC,MAAlBF,SAGFG,EAAWH,EAASI,KAAI,SAACC,EAAMC,GACnC,OAAO,cAAC,IAAD,UAAgBD,EAAKE,MAAXD,MAGbE,EAAWR,EAASI,KAAI,SAACC,EAAMC,GACnC,OAAO,cAAC,IAAD,UAAoB,6BAAKD,EAAKI,SAAfH,MAGxB,OACE,eAAE,IAAF,CAAOI,aAAc,EAArB,UACE,cAAC,IAAD,UACGP,IAGFK,S,GArBcG,c,QCURC,EAZE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,iBAAtB,OACf,kCACGF,EACD,uBACEG,KAAK,WACLT,KAAMM,EACNI,QAASH,EACTI,SAAUH,QCWDI,EAjBO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAC7BC,EAAcF,EAAWhB,KAAI,SAACa,EAASM,GAC3C,OAAO,cAAC,EAAD,CACLV,MAAOU,EAAMC,SAAS,IAAIC,SAAS,EAAG,KACtCX,WAAYG,EACZF,iBAAkBM,GACbE,EAAMC,SAAS,IAAIC,SAAS,EAAG,SAIxC,OACE,qBAAKC,UAAU,+BAAf,SACGJ,KCwIQK,E,kDAlJb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAYR0B,kBAAoB,WAClB,EAAKC,gBAdY,EAkBnBC,qBAAuB,SAACC,GACtB,IAAMR,EAAQS,OAAOD,EAAME,OAAO1B,MAC5B2B,EAAa,YAAO,EAAKC,MAAMf,YACrCc,EAAcX,IAAUW,EAAcX,GAEtC,EAAKM,aAAaE,EAAME,OAAO1B,KAAM2B,EAAcX,GAAQW,IAvB1C,EA2BnBE,gBAAkB,WAGhB,IAFA,IAAIC,EAAa,EACbH,EAAgB,GACXI,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAASC,KAAKD,SAAW,GAC7BL,EAAcO,KAAKF,GACfA,IACFF,GAAcG,KAAKE,IAAI,EAAGJ,IAI9B,EAAKK,QAAUN,EACf,EAAKR,cAAc,EAAG,KAAMK,IAvCX,EA2CnBU,eAAiB,WACf,EAAKD,QAAU,EACf,EAAKd,cAAc,EAAG,KAAMgB,MAAM,IAAIC,MAAK,KA7C1B,EAiDnBC,eAAiB,WACf,EAAKJ,QAAU,WACf,EAAKd,cAAc,EAAG,KAAMgB,MAAM,IAAIC,MAAK,KAnD1B,EAuDnBjB,aAAe,WAAoD,IAAnDmB,EAAkD,wDAA1C,EAAGC,EAAuC,uDAA/B,KAAMf,EAAyB,uDAAT,KAGvD,IAAc,IAAVc,EAAa,CAEf,IAAME,EAAMV,KAAKE,IAAI,EAAGM,GACxBC,EAAQ,EAAKN,SAAWO,EAAM,EAAKP,SAAWO,EAGhD,EAAKC,SACHC,OAAOC,OACL,CACEC,YAAa,EAAKX,QAAQnB,SAAS,GAAG+B,cAAc9B,SAAS,GAAI,KACjE+B,aAAc,EAAKb,QAAQnB,SAAS,IAAI+B,cAAc9B,SAAS,GAAI,KACnEgC,SAAU,EAAKd,QAAQnB,SAAS,IAAI+B,cAAc9B,SAAS,EAAG,MAE9C,OAAlBS,EAAyB,GAAK,CAAEd,WAAYc,MAvE/B,EA6EnBwB,YAAc,WACZ,OAAO,uBAAOhC,UAAU,SAAjB,SACL,kCACE,+BACE,wCACA,6BACE,uBAAOV,KAAK,OAAOT,KAAK,SAASoD,UAAU,EAAMC,UAAU,KAAKC,KAAK,KAAKC,MAAO,CAAE,UAAa,SAC9FC,MAAO,EAAK5B,MAAMmB,mBAIxB,+BACE,yCACA,6BACE,uBAAOtC,KAAK,OAAOT,KAAK,UAAUoD,UAAU,EAAMC,UAAU,KAAKC,KAAK,KAAKC,MAAO,CAAE,UAAa,SAC/FC,MAAO,EAAK5B,MAAMqB,oBAIxB,+BACE,qCACA,6BACE,uBAAOxC,KAAK,OAAOT,KAAK,MAAMoD,UAAU,EAAMC,UAAU,KAAKC,KAAK,KAAKC,MAAO,CAAE,UAAa,SAC3FC,MAAO,EAAK5B,MAAMsB,sBAjG5B,EAAKd,QAAU,EACf,EAAKR,MAAQ,CACXmB,YAAa,GACbE,aAAc,GACdC,SAAU,GACVrC,WAAYyB,MAAM,IAAIC,MAAK,IARZ,E,qDA8GjB,OACE,gCACE,2BAAUpB,UAAU,yBAApB,UACE,4CACA,cAAC,EAAD,CACEN,WAAYnB,KAAKkC,MAAMf,WACvBC,QAASpB,KAAK6B,0BAIlB,2BAAUJ,UAAU,yBAApB,UACE,6CACA,mBAAMgC,YAAN,OAGF,2BAAUhC,UAAU,wCAApB,UACE,6CAEA,wBAAQA,UAAU,kBAAkBsC,QAAS/D,KAAKmC,gBAAlD,uBAIA,wBAAQV,UAAU,kBAAkBsC,QAAS/D,KAAK2C,eAAlD,uBAIA,wBAAQlB,UAAU,kBAAkBsC,QAAS/D,KAAK8C,eAAlD,iC,GA1IiBpC,aCSZsD,E,uKARX,OACE,8BACE,mD,GAJkBtD,aCoBXuD,MAhBf,WACE,OACE,qBAAKxC,UAAU,MAAf,SACE,cAAC,EAAD,CACE1B,SACE,CACE,CAAEO,KAAM,mBAAoBE,MAAO,cAAC,EAAD,KACnC,CAAEF,KAAM,QAASE,MAAO,cAAC,EAAD,KACxB,CAAEF,KAAM,YAAaE,MAAO,+B,MCRxC0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5ede9987.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nclass TabGroup extends Component {\r\n\r\n\r\n  render() {\r\n    const { tabitmes } = this.props\r\n\r\n\r\n    const titleArr = tabitmes.map((item, idx) => {\r\n      return <Tab key={idx}>{item.name}</Tab>\r\n    })\r\n\r\n    const panelArr = tabitmes.map((item, idx) => {\r\n      return <TabPanel key={idx}><h2>{item.panel}</h2></TabPanel>\r\n    })\r\n\r\n    return (\r\n      < Tabs defaultIndex={0} >\r\n        <TabList>\r\n          {titleArr}\r\n        </TabList>\r\n\r\n        {panelArr}\r\n      </Tabs >\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default TabGroup\r\n","import React from 'react'\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <label>\r\n    {label}\r\n    <input\r\n      type=\"checkbox\"\r\n      name={label}\r\n      checked={isSelected}\r\n      onChange={onCheckboxChange}\r\n    />\r\n  </label>\r\n)\r\n\r\nexport default Checkbox","import React from 'react'\r\nimport Checkbox from './Checkbox'\r\n\r\nconst CheckboxGroup = ({ checkedArr, handler }) => {\r\n  const checkboxArr = checkedArr.map((checked, index) => {\r\n    return <Checkbox\r\n      label={index.toString(10).padStart(2, \"0\")}\r\n      isSelected={checked}\r\n      onCheckboxChange={handler}\r\n      key={index.toString(10).padStart(2, \"0\")}\r\n    />\r\n  })\r\n\r\n  return (\r\n    <div className=\"f5 flex flex-row-reverse ma1\">\r\n      {checkboxArr}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckboxGroup","import React, { Component } from \"react\"\r\nimport CheckboxGroup from './CheckboxGroup'\r\n\r\nclass BinConverter extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.bitsVal = 0\r\n    this.state = {\r\n      binaryValue: \"\",\r\n      decimalValue: \"\",\r\n      hexValue: \"\",\r\n      checkedArr: Array(32).fill(false),\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    this.updateValues()\r\n  }\r\n\r\n\r\n  handleCheckboxChange = (event) => {\r\n    const index = Number(event.target.name)\r\n    const newCheckedArr = [...this.state.checkedArr]  // clone\r\n    newCheckedArr[index] = !newCheckedArr[index]  // toggle\r\n\r\n    this.updateValues(event.target.name, newCheckedArr[index], newCheckedArr)\r\n  }\r\n\r\n\r\n  handleRandomize = () => {\r\n    let newbitsVal = 0\r\n    let newCheckedArr = []\r\n    for (let i = 0; i < 32; i++) {\r\n      let random = Math.random() > 0.5 ? true : false\r\n      newCheckedArr.push(random)\r\n      if (random) {\r\n        newbitsVal += Math.pow(2, i)\r\n      }\r\n    }\r\n\r\n    this.bitsVal = newbitsVal\r\n    this.updateValues(-1, null, newCheckedArr)\r\n  }\r\n\r\n\r\n  handleResetAll = () => {\r\n    this.bitsVal = 0\r\n    this.updateValues(-1, null, Array(32).fill(false))\r\n  }\r\n\r\n\r\n  handleCheckAll = () => {\r\n    this.bitsVal = 0xFFFFFFFF\r\n    this.updateValues(-1, null, Array(32).fill(true))\r\n  }\r\n\r\n\r\n  updateValues = (bitN = -1, onoff = null, newCheckedArr = null) => {\r\n    // this function convert this.bitsVal to Outputs\r\n\r\n    if (bitN !== -1) {\r\n      // update this.bitsVal\r\n      const val = Math.pow(2, bitN)\r\n      onoff ? this.bitsVal += val : this.bitsVal -= val\r\n    }\r\n\r\n    this.setState(\r\n      Object.assign(\r\n        {\r\n          binaryValue: this.bitsVal.toString(2).toUpperCase().padStart(32, \"0\"),\r\n          decimalValue: this.bitsVal.toString(10).toUpperCase().padStart(10, \"0\"),\r\n          hexValue: this.bitsVal.toString(16).toUpperCase().padStart(8, \"0\"),\r\n        },\r\n        newCheckedArr === null ? {} : { checkedArr: newCheckedArr }\r\n      )\r\n    )\r\n  }\r\n\r\n\r\n  OutputTable = () => {\r\n    return <table className=\"center\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Binary</td>\r\n          <td>\r\n            <input type=\"text\" name=\"binary\" readOnly={true} maxLength=\"32\" size=\"32\" style={{ \"textAlign\": \"right\" }}\r\n              value={this.state.binaryValue} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Decimal</td>\r\n          <td>\r\n            <input type=\"text\" name=\"decimal\" readOnly={true} maxLength=\"32\" size=\"32\" style={{ \"textAlign\": \"right\" }}\r\n              value={this.state.decimalValue} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Hex</td>\r\n          <td>\r\n            <input type=\"text\" name=\"Hex\" readOnly={true} maxLength=\"32\" size=\"32\" style={{ \"textAlign\": \"right\" }}\r\n              value={this.state.hexValue} />\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <fieldset className=\"ba br3 ma3 w-60 center\">\r\n          <legend>Inputs</legend>\r\n          <CheckboxGroup\r\n            checkedArr={this.state.checkedArr}\r\n            handler={this.handleCheckboxChange}\r\n          />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"ba br3 ma3 w-60 center\">\r\n          <legend>Outputs</legend>\r\n          <this.OutputTable />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"ba br3 ma3 justify-center w-60 center\">\r\n          <legend>Buttons</legend>\r\n\r\n          <button className=\"br3 ma1 pointer\" onClick={this.handleRandomize}>\r\n            Randomize\r\n          </button>\r\n\r\n          <button className=\"br3 ma1 pointer\" onClick={this.handleResetAll}>\r\n            Reset all\r\n          </button>\r\n\r\n          <button className=\"br3 ma1 pointer\" onClick={this.handleCheckAll}>\r\n            Check all\r\n          </button>\r\n        </fieldset>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default BinConverter\r\n","import { Component } from \"react\"\r\n\r\nclass SimpleTimer extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>SimpleTimer</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SimpleTimer\r\n","\nimport './App.css';\nimport TabGroup from \"../components/tabgroup\"\nimport BinConverter from \"../components/bin-converter\"\nimport SimpleTimer from \"../components/simple-timer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TabGroup\n        tabitmes={\n          [\n            { name: \"binary converter\", panel: <BinConverter /> },\n            { name: \"timer\", panel: <SimpleTimer /> },\n            { name: \"undefined\", panel: <div></div> },\n          ]\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}