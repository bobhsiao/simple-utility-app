{"version":3,"sources":["components/Tabgroup.js","components/Checkbox.js","components/CheckboxGroup.js","components/Bin-converter.js","components/Qrcode.js","components/Stopwatch.js","containers/App.js","index.js"],"names":["TabGroup","tabitmes","this","props","titleArr","map","item","idx","name","panelArr","panel","defaultIndex","Component","Checkbox","label","isSelected","onCheckboxChange","type","checked","onChange","CheckboxGroup","checkedArr","handler","checkboxArr","index","toString","padStart","className","BinConverter","componentDidMount","updateValues","handleCheckboxChange","event","Number","target","newCheckedArr","state","handleRandomize","newbitsVal","i","random","Math","push","pow","bitsVal","handleResetAll","Array","fill","handleCheckAll","bitN","onoff","val","setState","Object","assign","binaryValue","toUpperCase","decimalValue","hexValue","OutputTable","readOnly","maxLength","size","style","value","onClick","QRcode","inputHandler","key","preventDefault","qrcodeHandler","inputText","clearHandler","imgsrc","log","length","QRcodeLib","toDataURL","then","url","catch","err","console","render","rows","cols","onKeyDown","src","alt","width","Stopwatch","totalStr","makeTimeString","lapStr","updateTime","t","tMili","tSec","buttonText","totalTime","lapTime","startButtonText","handleStart","startButtonState","tTotalStart","Date","getTime","tLapStart","timerID","setInterval","tTotalElpased","tPrevElpased","timeElapseLAP","enBtnReset","enBtnStart","enBtnLap","handlePause","clearInterval","addResult","resultIndex","handleLap","handleReset","resultRows","total","lap","newRow","disabled","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3578c0f1.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nclass TabGroup extends Component {\r\n\r\n\r\n  render() {\r\n    const { tabitmes } = this.props\r\n\r\n\r\n    const titleArr = tabitmes.map((item, idx) => {\r\n      return <Tab key={idx}>{item.name}</Tab>\r\n    })\r\n\r\n    const panelArr = tabitmes.map((item, idx) => {\r\n      return <TabPanel key={idx}>{item.panel}</TabPanel>\r\n    })\r\n\r\n    return (\r\n      < Tabs defaultIndex={0} >\r\n        <TabList>\r\n          {titleArr}\r\n        </TabList>\r\n\r\n        {panelArr}\r\n      </Tabs >\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default TabGroup\r\n","import React from 'react'\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <label>\r\n    {label}\r\n    <input\r\n      type=\"checkbox\"\r\n      name={label}\r\n      checked={isSelected}\r\n      onChange={onCheckboxChange}\r\n    />\r\n  </label>\r\n)\r\n\r\nexport default Checkbox","import React from 'react'\r\nimport Checkbox from './Checkbox'\r\n\r\nconst CheckboxGroup = ({ checkedArr, handler }) => {\r\n  const checkboxArr = checkedArr.map((checked, index) => {\r\n    return <Checkbox\r\n      label={index.toString(10).padStart(2, \"0\")}\r\n      isSelected={checked}\r\n      onCheckboxChange={handler}\r\n      key={index.toString(10).padStart(2, \"0\")}\r\n    />\r\n  })\r\n\r\n  return (\r\n    <div className=\"f5 flex flex-row-reverse ma1\">\r\n      {checkboxArr}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckboxGroup","import React, { Component } from \"react\"\r\nimport CheckboxGroup from './CheckboxGroup'\r\n\r\nclass BinConverter extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.bitsVal = 0\r\n    this.state = {\r\n      binaryValue: \"\",\r\n      decimalValue: \"\",\r\n      hexValue: \"\",\r\n      checkedArr: Array(32).fill(false),\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    this.updateValues()\r\n  }\r\n\r\n\r\n  handleCheckboxChange = (event) => {\r\n    const index = Number(event.target.name)\r\n    const newCheckedArr = [...this.state.checkedArr]  // clone\r\n    newCheckedArr[index] = !newCheckedArr[index]  // toggle\r\n\r\n    this.updateValues(event.target.name, newCheckedArr[index], newCheckedArr)\r\n  }\r\n\r\n\r\n  handleRandomize = () => {\r\n    let newbitsVal = 0\r\n    let newCheckedArr = []\r\n    for (let i = 0; i < 32; i++) {\r\n      let random = Math.random() > 0.5 ? true : false\r\n      newCheckedArr.push(random)\r\n      if (random) {\r\n        newbitsVal += Math.pow(2, i)\r\n      }\r\n    }\r\n\r\n    this.bitsVal = newbitsVal\r\n    this.updateValues(-1, null, newCheckedArr)\r\n  }\r\n\r\n\r\n  handleResetAll = () => {\r\n    this.bitsVal = 0\r\n    this.updateValues(-1, null, Array(32).fill(false))\r\n  }\r\n\r\n\r\n  handleCheckAll = () => {\r\n    this.bitsVal = 0xFFFFFFFF\r\n    this.updateValues(-1, null, Array(32).fill(true))\r\n  }\r\n\r\n\r\n  updateValues = (bitN = -1, onoff = null, newCheckedArr = null) => {\r\n    // this function convert this.bitsVal to Outputs\r\n\r\n    if (bitN !== -1) {\r\n      // update this.bitsVal\r\n      const val = Math.pow(2, bitN)\r\n      onoff ? this.bitsVal += val : this.bitsVal -= val\r\n    }\r\n\r\n    this.setState(\r\n      Object.assign(\r\n        {\r\n          binaryValue: this.bitsVal.toString(2).toUpperCase().padStart(32, \"0\"),\r\n          decimalValue: this.bitsVal.toString(10).toUpperCase().padStart(10, \"0\"),\r\n          hexValue: this.bitsVal.toString(16).toUpperCase().padStart(8, \"0\"),\r\n        },\r\n        newCheckedArr === null ? {} : { checkedArr: newCheckedArr }\r\n      )\r\n    )\r\n  }\r\n\r\n\r\n  OutputTable = () => {\r\n    return <table className=\"center\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Binary</td>\r\n          <td>\r\n            <input type=\"text\" name=\"binary\" readOnly={true} maxLength=\"32\" size=\"32\" style={{ \"textAlign\": \"right\" }}\r\n              value={this.state.binaryValue} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Decimal</td>\r\n          <td>\r\n            <input type=\"text\" name=\"decimal\" readOnly={true} maxLength=\"32\" size=\"32\" style={{ \"textAlign\": \"right\" }}\r\n              value={this.state.decimalValue} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Hex</td>\r\n          <td>\r\n            <input type=\"text\" name=\"Hex\" readOnly={true} maxLength=\"32\" size=\"32\" style={{ \"textAlign\": \"right\" }}\r\n              value={this.state.hexValue} />\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <fieldset className=\"ba br3 ma3 w-60 center\">\r\n          <legend>Inputs</legend>\r\n          <CheckboxGroup\r\n            checkedArr={this.state.checkedArr}\r\n            handler={this.handleCheckboxChange}\r\n          />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"ba br3 ma3 w-60 center\">\r\n          <legend>Outputs</legend>\r\n          <this.OutputTable />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"ba br3 ma3 justify-center w-60 center\">\r\n          <legend>Buttons</legend>\r\n\r\n          <button className=\"br3 ma1 pointer\" onClick={this.handleRandomize}>\r\n            Randomize\r\n          </button>\r\n\r\n          <button className=\"br3 ma1 pointer\" onClick={this.handleResetAll}>\r\n            Reset all\r\n          </button>\r\n\r\n          <button className=\"br3 ma1 pointer\" onClick={this.handleCheckAll}>\r\n            Check all\r\n          </button>\r\n        </fieldset>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default BinConverter\r\n","import React, { Component } from \"react\"\r\nimport QRcodeLib from 'qrcode'\r\n\r\nclass QRcode extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      imgsrc: \"\",\r\n      inputText: \"\",\r\n      log: \"\"\r\n    }\r\n  }\r\n\r\n  inputHandler = (event) => {\r\n\r\n    switch (event.type) {\r\n      case \"keydown\":\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault()\r\n          this.qrcodeHandler()\r\n        }\r\n        break\r\n\r\n      case \"change\":\r\n        this.setState({ inputText: event.target.value })\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  clearHandler = (event) => {\r\n    this.setState({ imgsrc: \"\", inputText: \"\", log: \"\" })\r\n  }\r\n\r\n  qrcodeHandler = () => {\r\n    const { inputText } = this.state\r\n\r\n    if (inputText.length === 0) {\r\n      this.setState({ imgsrc: \"\", log: \"No input\" })\r\n      return\r\n    }\r\n\r\n    QRcodeLib.toDataURL(inputText)\r\n      .then(url => this.setState({ imgsrc: url, log: `${inputText.length}` }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  render = () => {\r\n\r\n    return (\r\n      <div>\r\n        <fieldset className=\"w-60 center flex ma3 ba br3 pa3 ma3\">\r\n          <legend> Input String </legend>\r\n          <textarea\r\n            className=\"tc f4 br3 center w-80\"\r\n            rows=\"4\"\r\n            cols=\"64\"\r\n            maxLength=\"256\"\r\n            value={this.state.inputText}\r\n            onChange={this.inputHandler}\r\n            onKeyDown={this.inputHandler}\r\n          >\r\n          </textarea>\r\n          <button className=\"br3 w-10\" onClick={this.qrcodeHandler} > GO </button>\r\n          <button className=\"br3 w-10\" onClick={this.clearHandler} > Clear </button>\r\n        </fieldset>\r\n\r\n        <fieldset className=\"flex flex-column w-60 center flex ma3 ba br3\">\r\n          <legend> QR Code </legend>\r\n          <img className=\"center\" src={this.state.imgsrc} alt=\"\" width=\"30%\" />\r\n          <h2 className=\"center\">{this.state.log}</h2>\r\n        </fieldset>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QRcode\r\n","import { Component } from \"react\"\r\n\r\nclass Stopwatch extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.timerID = null\r\n    this.tTotalStart = 0\r\n    this.tTotalElpased = 0\r\n    this.tLapStart = 0\r\n    this.tPrevElpased = 0\r\n    this.startButtonState = \"start\"\r\n    this.resultIndex = 0\r\n\r\n    this.totalStr = \"\"\r\n    this.lapStr = \"\"\r\n\r\n    this.state = {\r\n      totalTime: \"\",\r\n      lapTime: \"\",\r\n      startButtonText: \"Start\",\r\n      resultRows: <tr></tr>,\r\n      enBtnReset: false,\r\n      enBtnStart: true,\r\n      enBtnLap: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.totalStr = this.makeTimeString(0)\r\n    this.lapStr = this.makeTimeString(0)\r\n    this.updateTime()\r\n  }\r\n\r\n  makeTimeString = (t) => {\r\n\r\n    const tMili = t % 1000\r\n    t = (t - tMili) / 1000 // convert t to second\r\n    const tSec = t % 60\r\n    const tMin = (t - tSec) / 60\r\n\r\n    return `${tMin.toString(10).padStart(2, \"0\")}:${tSec.toString(10).padStart(2, \"0\")}.${tMili.toString(10).padStart(3, \"0\")}`\r\n  }\r\n\r\n\r\n  updateTime = (buttonText = null) => {\r\n\r\n    this.setState(\r\n      Object.assign(\r\n        {\r\n          totalTime: this.totalStr,\r\n          lapTime: this.lapStr,\r\n        },\r\n        buttonText === null ? {} : { startButtonText: buttonText }\r\n      )\r\n    )\r\n\r\n  }\r\n\r\n  handleStart = () => {\r\n    switch (this.startButtonState) {\r\n      case \"start\":\r\n        this.tTotalStart = new Date().getTime()\r\n        this.tLapStart = this.tTotalStart\r\n\r\n        this.timerID = setInterval(() => {\r\n          this.tTotalElpased = new Date().getTime() - this.tTotalStart + this.tPrevElpased\r\n          let timeElapseLAP = new Date().getTime() - this.tLapStart\r\n\r\n          this.totalStr = this.makeTimeString(this.tTotalElpased)\r\n          this.lapStr = this.makeTimeString(timeElapseLAP)\r\n\r\n          this.updateTime(\"Stop\")\r\n        }, 10)\r\n\r\n        this.startButtonState = \"stop\"\r\n        this.setState({\r\n          enBtnReset: true,\r\n          enBtnStart: true,\r\n          enBtnLap: true,\r\n        })\r\n        break\r\n\r\n      case \"stop\":\r\n        this.handlePause()\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  handlePause = () => {\r\n    if (this.timerID != null) {\r\n      clearInterval(this.timerID)\r\n      this.timerID = null\r\n    }\r\n\r\n    this.tPrevElpased = this.tTotalElpased\r\n    this.startButtonState = \"start\"\r\n    this.updateTime(\"Start\")\r\n    this.setState({\r\n      enBtnReset: true,\r\n      enBtnStart: true,\r\n      enBtnLap: false,\r\n    })\r\n    this.addResult(this.resultIndex++, this.totalStr, this.lapStr)\r\n  }\r\n\r\n  handleLap = () => {\r\n    this.tLapStart = new Date().getTime()\r\n    this.addResult(this.resultIndex++, this.totalStr, this.lapStr)\r\n  }\r\n\r\n  handleReset = () => {\r\n    if (this.timerID != null) {\r\n      clearInterval(this.timerID)\r\n      this.timerID = null\r\n    }\r\n    this.tTotalStart = 0\r\n    this.tTotalElpased = 0\r\n    this.tLapStart = 0\r\n    this.tPrevElpased = 0\r\n    this.startButtonState = \"start\"\r\n    this.resultIndex = 0\r\n    this.totalStr = this.makeTimeString(0)\r\n    this.lapStr = this.makeTimeString(0)\r\n    this.updateTime(\"Start\")\r\n\r\n    this.setState({\r\n      resultRows: [],\r\n      enBtnReset: false,\r\n      enBtnStart: true,\r\n      enBtnLap: false,\r\n    })\r\n  }\r\n\r\n\r\n  addResult = (index, total, lap) => {\r\n    // make one table row\r\n    const newRow = <tr>\r\n      <td>{`#${(index + 1).toString().padStart(3, \"0\")}`}</td>\r\n      <td>{total}</td>\r\n      <td>{lap}</td>\r\n    </tr>\r\n\r\n    this.setState({\r\n      resultRows: [newRow, this.state.resultRows]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"flex flex-row ma3 w-60 center\">\r\n          <fieldset className=\"w-50 ma3 br3\">\r\n            <legend>Total</legend>\r\n            <h1>{this.state.totalTime}</h1>\r\n          </fieldset>\r\n          <fieldset className=\"w-50 ma3 br3\">\r\n            <legend>LAP</legend>\r\n            <h1>{this.state.lapTime}</h1>\r\n          </fieldset>\r\n        </div>\r\n\r\n        <div className=\"flex flex-row ma3 w-60 center justify-center\">\r\n          <button\r\n            className=\"br3 w-20 pa3 ma3\"\r\n            disabled={!this.state.enBtnReset}\r\n            onClick={this.handleReset}\r\n          >\r\n            Reset\r\n          </button>\r\n\r\n          <button\r\n            className=\"br3 w-20 pa3 ma3\"\r\n            disabled={!this.state.enBtnStart}\r\n            onClick={this.handleStart}>\r\n            {this.state.startButtonText}\r\n          </button>\r\n\r\n          <button\r\n            className=\"br3 w-20 pa3 ma3\"\r\n            disabled={!this.state.enBtnLap}\r\n            onClick={this.handleLap}>\r\n            LAP\r\n          </button>\r\n        </div>\r\n\r\n        <fieldset className=\"flex flex-row ma3 w-60 center br3\">\r\n          <legend> Results </legend>\r\n          <table className=\"center f3 w-90\">\r\n            <thead>\r\n              <td>No.</td>\r\n              <td>Total</td>\r\n              <td>LAP</td>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.resultRows}\r\n            </tbody>\r\n          </table>\r\n        </fieldset>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Stopwatch\r\n","\nimport './App.css';\nimport TabGroup from \"../components/Tabgroup\"\nimport BinConverter from \"../components/Bin-converter\"\nimport QRcode from \"../components/Qrcode\"\nimport Stopwatch from \"../components/Stopwatch\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TabGroup\n        tabitmes={\n          [\n            { name: \"binary converter\", panel: <BinConverter /> },\n            { name: \"QR Code\", panel: <QRcode /> },\n            { name: \"Stopwatch\", panel: <Stopwatch /> },\n          ]\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}