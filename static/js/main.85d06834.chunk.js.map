{"version":3,"sources":["components/Tabgroup.js","components/Checkbox.js","components/CheckboxGroup.js","components/Bin-converter.js","components/Qrcode.js","components/Stopwatch.js","components/Weathercards.js","components/AirQuality.js","containers/App.js","index.js"],"names":["TabGroup","tabitmes","this","props","titleArr","map","item","idx","style","bgcolor","name","panelArr","panel","defaultIndex","Component","Checkbox","label","isSelected","onCheckboxChange","className","type","checked","onChange","CheckboxGroup","checkedArr","handler","base","checkboxArr","index","toString","padStart","BinConverter","useState","bitsVal","setBitsVal","binValue","setBinValue","decValue","setDecValue","hexValue","setHexValue","Array","fill","setCheckedArr","useEffect","toUpperCase","handleCheckboxChange","event","Number","target","newCheckedArr","newBitsVal","val","Math","pow","OutputTable","readOnly","maxLength","size","value","slice","onClick","x","tmp","i","random","push","QRcode","imgsrc","setImgsrc","inputText","setInputtext","log","setLog","inputHandler","key","preventDefault","qrcodeHandler","length","QRcodeLib","toDataURL","then","url","catch","err","console","rows","cols","onKeyDown","src","alt","width","Stopwatch","componentDidMount","totalStr","makeTimeString","lapStr","updateTime","t","tMili","tSec","buttonText","setState","Object","assign","totalTime","lapTime","startButtonText","handleStart","startButtonState","tTotalStart","Date","getTime","tLapStart","timerID","setInterval","tTotalElpased","tPrevElpased","timeElapseLAP","enBtnReset","enBtnStart","enBtnLap","handlePause","clearInterval","addResult","resultIndex","handleLap","handleReset","resultRows","total","lap","newRow","state","disabled","locationArr","Weathercard","records","location","weatherElement","w","time","parameter","parameterName","wx","pop","mint","ci","maxt","startTime","endTime","wxIndex","parameterValue","titleTimeString","substring","replace","title","getTimeString","getWxImgUrl","height","start","end","tzoffset","getTimezoneOffset","today","now","toISOString","split","sDate","sHour","process","Weathercards","setLocation","gRecords","setRecords","isMounted","fetch","encodeURI","data","json","locationName","e","loc","siteArr","keys","AirQuality","gLocation","gSite","setSite","DropdownMenu","AirQualityInfoCard","record","forEach","r","SiteName","County","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85d06834.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nclass TabGroup extends Component {\r\n\r\n\r\n  render() {\r\n    const { tabitmes } = this.props\r\n\r\n    const titleArr = tabitmes.map((item, idx) => {\r\n      return <Tab style={{ \"background\": item.bgcolor }} key={idx}>{item.name}</Tab>\r\n    })\r\n\r\n    const panelArr = tabitmes.map((item, idx) => {\r\n      return <TabPanel key={idx}>{item.panel}</TabPanel>\r\n    })\r\n\r\n    return (\r\n      < Tabs defaultIndex={0} >\r\n        <TabList>\r\n          {titleArr}\r\n        </TabList>\r\n\r\n        {panelArr}\r\n      </Tabs >\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default TabGroup\r\n","import React from 'react'\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\r\n  <div className=\"flex flex-column pa1 items-center\">\r\n    <label>{label}</label>\r\n    <input\r\n      type=\"checkbox\"\r\n      name={label}\r\n      checked={isSelected}\r\n      onChange={onCheckboxChange}\r\n    />\r\n  </div>\r\n\r\n)\r\n\r\nexport default Checkbox","import React from 'react'\r\nimport Checkbox from './Checkbox'\r\n\r\nconst CheckboxGroup = ({ checkedArr, handler, base }) => {\r\n  const checkboxArr = checkedArr.map((checked, index) => {\r\n    return <Checkbox\r\n      label={(base + index).toString(10).padStart(2, \"0\")}\r\n      isSelected={checked}\r\n      onCheckboxChange={handler}\r\n      key={(base + index).toString(10).padStart(2, \"0\")}\r\n    />\r\n  })\r\n\r\n  return (\r\n    <div className=\"flex flex-row-reverse ma1 justify-center\">\r\n      {checkboxArr}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckboxGroup","import React, { useState, useEffect } from \"react\"\r\nimport CheckboxGroup from './CheckboxGroup'\r\n\r\nconst BinConverter = () => {\r\n  // data flow: checkboxes/buttons => bitsVal => useEffect\r\n\r\n  const [bitsVal, setBitsVal] = useState(0)\r\n  const [binValue, setBinValue] = useState(\"\")\r\n  const [decValue, setDecValue] = useState(\"\")\r\n  const [hexValue, setHexValue] = useState(\"\")\r\n  const [checkedArr, setCheckedArr] = useState(Array(32).fill(false))\r\n\r\n  useEffect(() => {\r\n\r\n    setBitsVal(bitsVal)\r\n    setBinValue(bitsVal.toString(2).toUpperCase().padStart(32, \"0\"))\r\n    setDecValue(bitsVal.toString(10).toUpperCase().padStart(10, \"0\"))\r\n    setHexValue(bitsVal.toString(16).toUpperCase().padStart(8, \"0\"))\r\n\r\n  }, [bitsVal])\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const index = Number(event.target.name)\r\n    const newCheckedArr = [...checkedArr]  // clone\r\n    newCheckedArr[index] = !newCheckedArr[index]  // toggle\r\n\r\n    // handle checkboxes\r\n    setCheckedArr(newCheckedArr)\r\n\r\n    // handle bitsVal\r\n    let newBitsVal = bitsVal\r\n    const val = Math.pow(2, index)\r\n    newCheckedArr[index] ? newBitsVal = bitsVal + val : newBitsVal = bitsVal - val\r\n    setBitsVal(newBitsVal)\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    let newBitsVal = 0\r\n    let newCheckedArr = checkedArr.map((x, index) => {\r\n      const tmp = Math.pow(2, index)\r\n      if (!x) newBitsVal += tmp\r\n      return !x\r\n    })\r\n\r\n    setBitsVal(newBitsVal)\r\n    setCheckedArr(newCheckedArr)\r\n  }\r\n\r\n  const handleRandomize = () => {\r\n    let newBitsVal = 0\r\n    let newCheckedArr = []\r\n    for (let i = 0; i < 32; i++) {\r\n      let random = Math.random() > 0.5 ? true : false\r\n      newCheckedArr.push(random)\r\n      if (random) {\r\n        newBitsVal += Math.pow(2, i)\r\n      }\r\n    }\r\n\r\n    setBitsVal(newBitsVal)\r\n    setCheckedArr(newCheckedArr)\r\n  }\r\n\r\n\r\n  const handleResetAll = () => {\r\n    setBitsVal(0)\r\n    setCheckedArr(Array(32).fill(false))\r\n  }\r\n\r\n\r\n  const handleCheckAll = () => {\r\n    setBitsVal(0xFFFFFFFF)\r\n    setCheckedArr(Array(32).fill(true))\r\n  }\r\n\r\n  const OutputTable = () => {\r\n    return <table className=\"center\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Bin</td>\r\n          <td>\r\n            <input type=\"text\" name=\"binary24\" readOnly={true} maxLength=\"10\" size=\"10\" style={{ \"textAlign\": \"right\" }}\r\n              value={binValue.slice(0, 8)} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td></td>\r\n          <td>\r\n            <input type=\"text\" name=\"binary16\" readOnly={true} maxLength=\"10\" size=\"10\" style={{ \"textAlign\": \"right\" }}\r\n              value={binValue.slice(8, 16)} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td></td>\r\n          <td>\r\n            <input type=\"text\" name=\"binary08\" readOnly={true} maxLength=\"10\" size=\"10\" style={{ \"textAlign\": \"right\" }}\r\n              value={binValue.slice(16, 24)} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td></td>\r\n          <td>\r\n            <input type=\"text\" name=\"binary00\" readOnly={true} maxLength=\"10\" size=\"10\" style={{ \"textAlign\": \"right\" }}\r\n              value={binValue.slice(24, 32)} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Dec</td>\r\n          <td>\r\n            <input type=\"text\" name=\"decimal\" readOnly={true} maxLength=\"10\" size=\"10\" style={{ \"textAlign\": \"right\" }}\r\n              value={decValue} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>Hex</td>\r\n          <td>\r\n            <input type=\"text\" name=\"Hex\" readOnly={true} maxLength=\"10\" size=\"10\" style={{ \"textAlign\": \"right\" }}\r\n              value={hexValue} />\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-column justify-center center w-60\">\r\n      <fieldset className=\"ba br3 ma3\">\r\n        <legend>Inputs</legend>\r\n        <CheckboxGroup\r\n          checkedArr={checkedArr.slice(24, 32)}\r\n          handler={handleCheckboxChange}\r\n          base={24}\r\n        />\r\n\r\n        <CheckboxGroup\r\n          checkedArr={checkedArr.slice(16, 24)}\r\n          handler={handleCheckboxChange}\r\n          base={16}\r\n        />\r\n\r\n        <CheckboxGroup\r\n          checkedArr={checkedArr.slice(8, 16)}\r\n          handler={handleCheckboxChange}\r\n          base={8}\r\n        />\r\n\r\n        <CheckboxGroup\r\n          checkedArr={checkedArr.slice(0, 8)}\r\n          handler={handleCheckboxChange}\r\n          base={0}\r\n        />\r\n      </fieldset>\r\n\r\n      <fieldset className=\"ba br3 ma3 f5\">\r\n        <legend>Outputs</legend>\r\n        <OutputTable />\r\n      </fieldset>\r\n\r\n      <fieldset className=\"ba br3 ma3\">\r\n        <legend>Buttons</legend>\r\n\r\n        <div className=\"flex flex-row\">\r\n          <button className=\"br3 ma1 pointer w-50\" onClick={handleToggle}>\r\n            Toggle\r\n          </button>\r\n\r\n          <button className=\"br3 ma1 pointer w-50\" onClick={handleRandomize}>\r\n            Randomize\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"flex flex-row\">\r\n          <button className=\"br3 ma1 pointer  w-50\" onClick={handleResetAll}>\r\n            Reset all\r\n          </button>\r\n\r\n          <button className=\"br3 ma1 pointer  w-50\" onClick={handleCheckAll}>\r\n            Check all\r\n          </button>\r\n        </div>\r\n\r\n\r\n\r\n      </fieldset>\r\n    </div >\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default BinConverter\r\n","import React, { useState } from \"react\"\r\nimport QRcodeLib from 'qrcode'\r\n\r\nconst QRcode = () => {\r\n\r\n  const [imgsrc, setImgsrc] = useState(\"\")\r\n  const [inputText, setInputtext] = useState(\"\")\r\n  const [log, setLog] = useState(\"\")\r\n\r\n  const inputHandler = (event) => {\r\n\r\n    switch (event.type) {\r\n      case \"keydown\":\r\n        if (event.key === \"Enter\") {\r\n          event.preventDefault()\r\n          qrcodeHandler()\r\n        }\r\n        break\r\n\r\n      case \"change\":\r\n        setInputtext(event.target.value)\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const clearHandler = (event) => {\r\n    setImgsrc(\"\")\r\n    setInputtext(\"\")\r\n    setLog(\"\")\r\n  }\r\n\r\n  const qrcodeHandler = () => {\r\n    if (inputText.length === 0) {\r\n      setImgsrc(\"\")\r\n      setLog(\"No input\")\r\n      return\r\n    }\r\n\r\n    QRcodeLib.toDataURL(inputText)\r\n      .then(url => {\r\n        setImgsrc(url)\r\n        setLog(inputText.length)\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-column justify-center center w-60\">\r\n      <fieldset className=\"ba br3 ma3\">\r\n        <legend> Input String </legend>\r\n        <textarea\r\n          className=\"tc f5 br3 center w-100\"\r\n          rows=\"8\"\r\n          cols=\"32\"\r\n          maxLength=\"256\"\r\n          value={inputText}\r\n          onChange={inputHandler}\r\n          onKeyDown={inputHandler}\r\n        >\r\n        </textarea>\r\n        <div className=\"flex center w-100\">\r\n          <button className=\"pa1 ma1 br3 w-50\" onClick={qrcodeHandler} > GO </button>\r\n          <button className=\"pa1 ma1 br3 w-50\" onClick={clearHandler} > Clear </button>\r\n        </div>\r\n\r\n      </fieldset>\r\n\r\n      <fieldset className=\"ba br3 ma3 \">\r\n        <legend> QR Code </legend>\r\n        <img className=\"center\" src={imgsrc} alt=\"\" width=\"80%\" />\r\n        <h2 className=\"center\">{log}</h2>\r\n      </fieldset>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default QRcode\r\n","import { Component } from \"react\"\r\n\r\nclass Stopwatch extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.timerID = null\r\n    this.tTotalStart = 0\r\n    this.tTotalElpased = 0\r\n    this.tLapStart = 0\r\n    this.tPrevElpased = 0\r\n    this.startButtonState = \"start\"\r\n    this.resultIndex = 0\r\n\r\n    this.totalStr = \"\"\r\n    this.lapStr = \"\"\r\n\r\n    this.state = {\r\n      totalTime: \"\",\r\n      lapTime: \"\",\r\n      startButtonText: \"Start\",\r\n      resultRows: <tr></tr>,\r\n      enBtnReset: false,\r\n      enBtnStart: true,\r\n      enBtnLap: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.totalStr = this.makeTimeString(0)\r\n    this.lapStr = this.makeTimeString(0)\r\n    this.updateTime()\r\n  }\r\n\r\n  makeTimeString = (t) => {\r\n\r\n    const tMili = t % 1000\r\n    t = (t - tMili) / 1000 // convert t to second\r\n    const tSec = t % 60\r\n    const tMin = (t - tSec) / 60\r\n\r\n    return `${tMin.toString(10).padStart(2, \"0\")}:${tSec.toString(10).padStart(2, \"0\")}.${tMili.toString(10).padStart(3, \"0\")}`\r\n  }\r\n\r\n\r\n  updateTime = (buttonText = null) => {\r\n\r\n    this.setState(\r\n      Object.assign(\r\n        {\r\n          totalTime: this.totalStr,\r\n          lapTime: this.lapStr,\r\n        },\r\n        buttonText === null ? {} : { startButtonText: buttonText }\r\n      )\r\n    )\r\n\r\n  }\r\n\r\n  handleStart = () => {\r\n    switch (this.startButtonState) {\r\n      case \"start\":\r\n        this.tTotalStart = new Date().getTime()\r\n        this.tLapStart = this.tTotalStart\r\n\r\n        this.timerID = setInterval(() => {\r\n          this.tTotalElpased = new Date().getTime() - this.tTotalStart + this.tPrevElpased\r\n          let timeElapseLAP = new Date().getTime() - this.tLapStart\r\n\r\n          this.totalStr = this.makeTimeString(this.tTotalElpased)\r\n          this.lapStr = this.makeTimeString(timeElapseLAP)\r\n\r\n          this.updateTime(\"Stop\")\r\n        }, 10)\r\n\r\n        this.startButtonState = \"stop\"\r\n        this.setState({\r\n          enBtnReset: true,\r\n          enBtnStart: true,\r\n          enBtnLap: true,\r\n        })\r\n        break\r\n\r\n      case \"stop\":\r\n        this.handlePause()\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  handlePause = () => {\r\n    if (this.timerID != null) {\r\n      clearInterval(this.timerID)\r\n      this.timerID = null\r\n    }\r\n\r\n    this.tPrevElpased = this.tTotalElpased\r\n    this.startButtonState = \"start\"\r\n    this.updateTime(\"Start\")\r\n    this.setState({\r\n      enBtnReset: true,\r\n      enBtnStart: true,\r\n      enBtnLap: false,\r\n    })\r\n    this.addResult(this.resultIndex++, this.totalStr, this.lapStr)\r\n  }\r\n\r\n  handleLap = () => {\r\n    this.tLapStart = new Date().getTime()\r\n    this.addResult(this.resultIndex++, this.totalStr, this.lapStr)\r\n  }\r\n\r\n  handleReset = () => {\r\n    if (this.timerID != null) {\r\n      clearInterval(this.timerID)\r\n      this.timerID = null\r\n    }\r\n    this.tTotalStart = 0\r\n    this.tTotalElpased = 0\r\n    this.tLapStart = 0\r\n    this.tPrevElpased = 0\r\n    this.startButtonState = \"start\"\r\n    this.resultIndex = 0\r\n    this.totalStr = this.makeTimeString(0)\r\n    this.lapStr = this.makeTimeString(0)\r\n    this.updateTime(\"Start\")\r\n\r\n    this.setState({\r\n      resultRows: [],\r\n      enBtnReset: false,\r\n      enBtnStart: true,\r\n      enBtnLap: false,\r\n    })\r\n  }\r\n\r\n\r\n  addResult = (index, total, lap) => {\r\n    // make one table row\r\n    const newRow = <tr>\r\n      <td className=\"bg-light-red\">{`#${(index + 1).toString().padStart(2, \"0\")}`}</td>\r\n      <td className=\"bg-light-green\">{total}</td>\r\n      <td className=\"bg-light-blue\">{lap}</td>\r\n    </tr>\r\n\r\n    this.setState({\r\n      resultRows: [newRow, this.state.resultRows]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"flex flex-column justify-center center w-60\">\r\n        <fieldset className=\"ba br3 ma3\">\r\n          <fieldset className=\"br3\">\r\n            <legend>Total</legend>\r\n            <h2>{this.state.totalTime}</h2>\r\n          </fieldset>\r\n          <fieldset className=\"br3\">\r\n            <legend>LAP</legend>\r\n            <h2>{this.state.lapTime}</h2>\r\n          </fieldset>\r\n        </fieldset>\r\n\r\n        <fieldset className=\"ba br3 ma3\">\r\n          <button\r\n            className=\"br3 pa2 ma2\"\r\n            disabled={!this.state.enBtnReset}\r\n            onClick={this.handleReset}\r\n          >\r\n            Reset\r\n          </button>\r\n\r\n          <button\r\n            className=\"br3 pa2 ma2\"\r\n            disabled={!this.state.enBtnStart}\r\n            onClick={this.handleStart}>\r\n            {this.state.startButtonText}\r\n          </button>\r\n\r\n          <button\r\n            className=\"br3 pa2 ma2\"\r\n            disabled={!this.state.enBtnLap}\r\n            onClick={this.handleLap}>\r\n            LAP\r\n          </button>\r\n        </fieldset>\r\n\r\n        <fieldset className=\"ba br3 ma3\">\r\n          <legend> Results </legend>\r\n          <table className=\"center f5\">\r\n            <thead>\r\n              <td>No.</td>\r\n              <td>Total</td>\r\n              <td>LAP</td>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.resultRows}\r\n            </tbody>\r\n          </table>\r\n        </fieldset>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Stopwatch\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst API_WEATHERFC_URL = \"https://simple-utility-api.herokuapp.com/weatherfc\"\r\nconst locationArr = [\r\n  \"基隆市\", \"臺北市\", \"新北市\", \"桃園市\",\r\n  \"新竹市\", \"新竹縣\", \"苗栗縣\", \"臺中市\",\r\n  \"彰化縣\", \"南投縣\", \"雲林縣\", \"嘉義市\",\r\n  \"嘉義縣\", \"臺南市\", \"高雄市\", \"屏東縣\",\r\n  \"宜蘭縣\", \"花蓮縣\", \"臺東縣\", \"澎湖縣\",\r\n  \"金門縣\", \"連江縣\",\r\n]\r\n\r\n\r\nconst Weathercards = () => {\r\n\r\n  const [location, setLocation] = useState(\"臺北市\"); // default location\r\n  const [gRecords, setRecords] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true  // fix warning\r\n    fetch(encodeURI(`${API_WEATHERFC_URL}/${location}`))\r\n      .then(data => data.json())\r\n      .then(({ records }) => {\r\n        if (isMounted) {\r\n          setRecords(records)\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n\r\n    return () => { isMounted = false };\r\n  }, [location])\r\n\r\n  if (!gRecords) {\r\n    return <div>Loading</div>\r\n  }\r\n\r\n  const { locationName } = gRecords.location[0]\r\n  return (\r\n    <div>\r\n      <select\r\n        className=\"pa3 ma3 br3 w-40\"\r\n        onChange={(e) => { setLocation(e.target.value) }}\r\n        value={location}\r\n      >\r\n        <option value=\"\" disabled>選擇縣市</option>\r\n        {\r\n          locationArr.map((loc, idx) => (\r\n            <option value={loc} key={idx}>{loc}</option>\r\n          ))\r\n        }\r\n      </select>\r\n\r\n      <fieldset className=\"flex flex-row flex-wrap justify-center center pa3 ma3 br3 w-40\">\r\n        <legend>{locationName}</legend>\r\n        <Weathercard records={gRecords} index={0} />\r\n        <Weathercard records={gRecords} index={1} />\r\n        <Weathercard records={gRecords} index={2} />\r\n      </fieldset>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Weathercard = ({ records, index }) => {\r\n\r\n  if (!records.location) {\r\n    return <div></div>\r\n  }\r\n\r\n  const { weatherElement } = records.location[0]\r\n\r\n  const [wx, pop, mint, ci, maxt] = weatherElement.map(w => (w.time[index].parameter.parameterName))\r\n\r\n  const { startTime, endTime } = weatherElement[0].time[index]\r\n  const wxIndex = weatherElement[0].time[index].parameter.parameterValue\r\n  const titleTimeString =\r\n    `${startTime.substring(5, 16).replace(\"-\", \"/\").replace(\" \", \"-\")} ~ \\\r\n${endTime.substring(5, 16).replace(\"-\", \"/\").replace(\" \", \"-\")}`\r\n\r\n  return (\r\n    <div className=\"flex flex-column ma3 br3 pa3 bg-near-white\" style={{ \"width\": \"150px\", \"height\": \"200px\" }}>\r\n      <div title={titleTimeString}> {getTimeString(startTime, endTime)} </div>\r\n      <img src={getWxImgUrl(wxIndex)} alt={wx} title={wx} height=\"100px\" />\r\n      <div>🌡️ {mint} - {maxt}℃</div>\r\n      <div>☂ {pop}%</div>\r\n      <div>{ci}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst getTimeString = (start, end) => {\r\n  const tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds\r\n  const today = (new Date(Date.now() - tzoffset)).toISOString().substring(0, 10)\r\n  const [sDate, sHour] = start.split(\" \")\r\n\r\n  if (sDate === today && (sHour === \"06:00:00\" || sHour === \"12:00:00\")) {\r\n    return (\"今日白天\")\r\n  } else if (sDate === today && sHour === \"00:00:00\") {\r\n    return (\"今日凌晨\")\r\n  } else if (sDate === today && sHour === \"18:00:00\") {\r\n    return (\"今晚明晨\")\r\n  } else if (sDate !== today && sHour === \"06:00:00\") {\r\n    return (\"明日白天\")\r\n  } else if (sDate !== today && sHour === \"18:00:00\") {\r\n    return (\"明日晚上\")\r\n  } else {\r\n    console.log(\"〇〇〇〇\", today, sDate, sHour)\r\n    return (\"〇〇〇〇\")\r\n  }\r\n}\r\n\r\nconst getWxImgUrl = (index) => {\r\n  return `${process.env.PUBLIC_URL}/images/${index.toString().padStart(2, \"0\")}.svg`\r\n}\r\n\r\nexport default Weathercards","import React, { useState, useEffect } from 'react'\r\n\r\nconst API_AQ_URL = \"https://simple-utility-api.herokuapp.com/epadata/aqx_p_432\"\r\n\r\nconst siteArr = {\r\n  \"基隆市\": [\"基隆\"],\r\n  \"臺北市\": [\"士林\", \"大同\", \"中山\", \"古亭\", \"松山\", \"陽明\", \"萬華\"],\r\n  \"新北市\": [\"汐止\", \"萬里\", \"新店\", \"土城\", \"板橋\", \"新莊\", \"菜寮\", \"林口\", \"淡水\", \"三重\", \"永和\", \"富貴角\", \"新北(樹林)\", \"永和(環河)\"],\r\n  \"南投縣\": [\"南投\", \"竹山\", \"埔里\"],\r\n  \"嘉義市\": [\"嘉義\"],\r\n  \"嘉義縣\": [\"新港\", \"朴子\"],\r\n  \"宜蘭縣\": [\"宜蘭\", \"冬山\"],\r\n  \"屏東縣\": [\"屏東\", \"潮州\", \"恆春\", \"屏東(琉球)\", \"屏東(枋寮)\"],\r\n  \"彰化縣\": [\"彰化\", \"線西\", \"二林\", \"彰化(員林)\", \"彰化(大城)\"],\r\n  \"新竹市\": [\"新竹\"],\r\n  \"新竹縣\": [\"湖口\", \"竹東\"],\r\n  \"桃園市\": [\"桃園\", \"大園\", \"觀音\", \"平鎮\", \"龍潭\", \"中壢\"],\r\n  \"澎湖縣\": [\"馬公\"],\r\n  \"臺中市\": [\"豐原\", \"沙鹿\", \"大里\", \"忠明\", \"西屯\"],\r\n  \"臺南市\": [\"新營\", \"善化\", \"安南\", \"臺南\", \"臺南(麻豆)\", \"臺南(北門)\"],\r\n  \"臺東縣\": [\"臺東\", \"關山\"],\r\n  \"花蓮縣\": [\"花蓮\"],\r\n  \"苗栗縣\": [\"頭份\", \"苗栗\", \"三義\"],\r\n  \"連江縣\": [\"馬祖\"],\r\n  \"金門縣\": [\"金門\"],\r\n  \"雲林縣\": [\"斗六\", \"崙背\", \"臺西\", \"麥寮\"],\r\n  \"高雄市\": [\"美濃\", \"橋頭\", \"仁武\", \"鳳山\", \"大寮\", \"林園\", \"楠梓\", \"左營\", \"前金\", \"前鎮\", \"小港\", \"復興\"],\r\n}\r\n\r\nconst locationArr = Object.keys(siteArr)\r\n\r\n\r\nconst AirQuality = () => {\r\n\r\n  const [gRecords, setRecords] = useState({})\r\n  const [gLocation, setLocation] = useState(locationArr[0])\r\n  const [gSite, setSite] = useState(siteArr[locationArr[0]][0])\r\n\r\n  useEffect(() => {\r\n    // do once only\r\n    // console.log(\"Fetching\")\r\n    fetch(encodeURI(API_AQ_URL))\r\n      .then(data => data.json())\r\n      .then(({ records }) => {\r\n        setRecords(records)\r\n\r\n        // get all locations and sites  // TODO\r\n        // let ttt = {}\r\n        // let count = 0\r\n        // records.forEach(x => {\r\n        //   const county = x.County\r\n        //   const site = x.SiteName\r\n        //   if (!ttt[county]) {\r\n        //     ttt[county] = []\r\n        //     ttt[county].push(site)\r\n        //   } else {\r\n        //     ttt[county].push(site)\r\n        //   }\r\n        //   count++\r\n        // })\r\n        // console.log(ttt, count)\r\n        // end\r\n      })\r\n      .catch(err => console.log(err))\r\n\r\n  }, [])\r\n\r\n  const DropdownMenu = () => {\r\n\r\n    return (\r\n      <fieldset className=\"flex flex-row flex-wrap w-60 center justify-center br3\">\r\n        <legend> 測站 </legend>\r\n        <select\r\n          className=\"pa2 ma2 br3\"\r\n          onChange={e => {\r\n            //console.log(\"Location onChange\", e.target.value, siteArr[e.target.value][0])\r\n            setLocation(e.target.value);\r\n            setSite(siteArr[e.target.value][0])\r\n          }}\r\n          value={gLocation}\r\n        >\r\n          <option value=\"\" disabled>選擇縣市</option>\r\n          {\r\n            locationArr.map((loc, idx) => (\r\n              <option value={loc} key={idx}>{loc}</option>\r\n            ))\r\n          }\r\n        </select>\r\n\r\n        <select\r\n          className=\"pa2 ma2 br3\"\r\n          onChange={e => setSite(e.target.value)}\r\n          value={gSite}\r\n        >\r\n          <option value=\"\" disabled>選擇測站</option>\r\n          {\r\n            siteArr[gLocation].map((loc, idx) => (\r\n              <option value={loc} key={idx}>{loc}</option>\r\n            ))\r\n          }\r\n        </select>\r\n\r\n      </fieldset >\r\n    )\r\n  }\r\n\r\n\r\n  const AirQualityInfoCard = ({ records }) => {\r\n\r\n    let record = null\r\n\r\n    if (records.length) {\r\n      records.forEach(r => {\r\n        if (r.SiteName === gSite && r.County === gLocation) {\r\n          record = r\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n    if (!record) {\r\n      return <div>Loading</div>\r\n    }\r\n\r\n\r\n    return (\r\n      <fieldset className=\"flex flex-column w-60 center justify-center ma3 pa3 br3\">\r\n        {record[\"PublishTime\"]} <br></br>\r\n        {record[\"County\"]} / {record[\"SiteName\"]}<br></br>\r\n        <h1>{record[\"AQI\"]}</h1><br></br>\r\n        {record[\"Status\"]}<br></br>\r\n        PM2.5 移動平均{record[\"PM2.5_AVG\"]}<br></br>\r\n        PM2.5 小時濃度{record[\"PM2.5\"]}<br></br>\r\n\r\n        PM10 移動平均{record[\"PM10_AVG\"]}<br></br>\r\n        PM10 小時濃度{record[\"PM10\"]}<br></br>\r\n\r\n        O3 8小時移動平均{record[\"O3_8hr\"]}<br></br>\r\n        O3 小時濃度{record[\"O3\"]}<br></br>\r\n\r\n        CO 8小時移動平均{record[\"CO_8hr\"]}<br></br>\r\n        CO 小時濃度{record[\"CO\"]}<br></br>\r\n\r\n        SO2 小時濃度{record[\"SO2\"]}<br></br>\r\n\r\n        NO2 小時濃度{record[\"NO2\"]}<br></br>\r\n      </fieldset>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <DropdownMenu />\r\n      <AirQualityInfoCard records={gRecords} />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default AirQuality","\nimport './App.css';\nimport TabGroup from \"../components/Tabgroup\"\nimport BinConverter from \"../components/Bin-converter\"\nimport QRcode from \"../components/Qrcode\"\nimport Stopwatch from \"../components/Stopwatch\"\nimport Weathercards from \"../components/Weathercards\"\nimport AirQuality from \"../components/AirQuality\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TabGroup\n        tabitmes={\n          [\n            { name: \"binary-converter\", bgcolor: \"aliceblue\", panel: <BinConverter /> },\n            { name: \"QR-Code\", bgcolor: \"cornsilk\", panel: <QRcode /> },\n            { name: \"Stopwatch\", bgcolor: \"yellowgreen\", panel: <Stopwatch /> },\n            { name: \"Weather\", bgcolor: \"wheat\", panel: <Weathercards /> },\n            { name: \"Air-Quality\", bgcolor: \"honeydew\", panel: <AirQuality /> },\n          ]\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}